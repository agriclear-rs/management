<!DOCTYPE html>
<html>
  <head>
    <% include ./_layouts/head %>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css"
      rel="stylesheet"
    />
    <style>
      .alignstatus {
        align-self: center;
      }

      .task-nav {
        background-color: white;
      }

      .input-item {
        text-align: center;
        height: 40px;
        font-size: 20px;
      }

      .btn-number-spinner {
        height: 40px;
      }

      .blood-group-container {
        margin-top: 16px;
      }

      @media (min-width: 768px) {
        .blood-group-container {
          margin-top: 34px;
        }
      }

      .btn-blood-group {
        width: 100%;
      }

      .ibox-title {
        padding: 25px 22px 0px 22px;
      }

      #qr {
        width: 640px;
        border: 1px solid silver;
      }
      @media (max-width: 600px) {
        #qr {
          width: 300px;
          border: 1px solid silver;
        }
      }
      button:disabled,
      button[disabled] {
        opacity: 0.5;
      }
      .scan-type-region {
        display: block;
        border: 1px solid silver;
        padding: 10px;
        margin: 5px;
        border-radius: 5px;
      }
      .scan-type-region.disabled {
        opacity: 0.5;
      }
      .empty {
        display: block;
        width: 100%;
        height: 20px;
      }
      #qr .placeholder {
        padding: 50px;
      }
    </style>
  </head>

  <body class="md-skin">
    <% include ./_layouts/header %>
    <div id="wrapper">
      <div id="page-wrapper" class="gray-bg" style="width: 100% !important;">
        <div class="wrapper wrapper-content">
          <div class="row">
            <div class="col-lg-12">
              <div class="col text-center">
                <img src="/img/logos/agriclear.png" width="320" height="100" />
              </div>
              <div class="ibox">
                <div class="ibox-title">
                  <div class="row">
                    <div class="col-12 text-center">
                      <h2 class="d-none d-md-block"><strong>Agriclear QR Code Scanner</strong></h2>
                    </div>
                    <div class="col-md-12" style="text-align: center;">
                      <div id="qr" style="display: inline-block;">
                        <div class="placeholder">
                          If QR Scanner doesn't appear here. Click Request Permission below and
                          Start Scanning
                        </div>
                      </div>
                      <div id="scannedCodeContainer"></div>
                      <div id="feedback"></div>
                    </div>
                  </div>
                </div>
                <div class="ibox-content pt-4">
                  <div class="col-md-12 scan-type-region camera text-center" id="scanTypeCamera">
                    <div>
                      <div class="">
                        <input type="radio" name="scan-type" value="camera" checked />
                        <strong>Scan using Camera</strong>&nbsp;&nbsp;
                        <span id="status">Click "Start Scanning"</span>
                        <button id="requestPermission" class="btn btn-success btn-sm">
                          Request Permission
                        </button>
                        <div>
                          <div id="selectCameraContainer" style="display: inline-block;"></div>
                          <select id="cameraSelection" disabled></select>
                        </div>
                      </div>
                    </div>
                    <div>
                      <div class="text-center">
                        <button id="scanButton" class="btn btn-success btn-sm" disabled>
                          start scanning
                        </button>
                        <button id="stopButton" class="btn btn-warning btn-sm" disabled>
                          stop scanning
                        </button>
                      </div>
                    </div>
                  </div>
                  <div class="text-center">
                    <div style="margin-top: 3%;"></div>
                    <p>If you are associated with Agriclear, log into the system</p>
                    <button class="btn btn-danger btn-lg" onclick="location.href='/login'">
                      Login into the system
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <% include ./_layouts/footer %>
      </div>
    </div>
    <% include ./_layouts/foot %>
    <script src="/js/html5-qrcode.min.js"></script>
    <script>
      function docReady(fn) {
        // see if DOM is already available
        if (document.readyState === "complete" || document.readyState === "interactive") {
          // call on next available tick
          setTimeout(fn, 1);
        } else {
          document.addEventListener("DOMContentLoaded", fn);
        }
      }
      docReady(function () {
        const scanRegionCamera = document.getElementById("scanTypeCamera");
        const scanRegionFile = document.getElementById("scanTypeFile");
        const scanButton = document.getElementById("scanButton");
        const stopButton = document.getElementById("stopButton");
        const qrFileInput = document.getElementById("qrInputFile");
        const requestPermissionButton = document.getElementById("requestPermission");
        const selectCameraContainer = document.getElementById("selectCameraContainer");
        const cameraSelection = document.getElementById("cameraSelection");
        const scannedCodeContainer = document.getElementById("scannedCodeContainer");
        const feedbackContainer = document.getElementById("feedback");
        const statusContainer = document.getElementById("status");
        const SCAN_TYPE_CAMERA = "camera";
        const SCAN_TYPE_FILE = "file";
        // declaration of html5 qrcode
        const html5QrCode = new Html5Qrcode("qr", /* verbose= */ true);
        var currentScanTypeSelection = SCAN_TYPE_CAMERA;
        var codesFound = 0;
        var lastMessageFound = null;
        const setPlaceholder = () => {
          const placeholder = document.createElement("div");
          placeholder.innerHTML =
            "If QR Scanner doesn't appear here. Click Request Permission below and Start Scanning";
          placeholder.className = "placeholder";
          document.getElementById("qr").appendChild(placeholder);
        };
        const setFeedback = message => {
          feedbackContainer.innerHTML = message;
        };
        const setStatus = status => {
          statusContainer.innerHTML = status;
        };
        const qrCodeSuccessCallback = qrCodeMessage => {
          setStatus("Pattern Found");
          setFeedback("");
          if (lastMessageFound === qrCodeMessage.toLocaleLowerCase()) {
            return;
          }
          lastMessageFound = qrCodeMessage.toLocaleLowerCase();
          const result = document.createElement("div");
          setTimeout(function () {
            window.location = qrCodeMessage;
          }, 1000);
        };
        const qrCodeErrorCallback = message => {
          setStatus("Scanning");
        };
        const videoErrorCallback = message => {
          setFeedback(`Video Error, error = ${message}`);
        };
        const classExists = (element, needle) => {
          const classList = element.classList;
          for (var i = 0; i < classList.length; i++) {
            if (classList[i] == needle) {
              return true;
            }
          }
          return false;
        };
        const addClass = (element, className) => {
          if (!element || !className) throw "Both element and className mandatory";
          if (classExists(element, className)) return;
          element.classList.add(className);
        };
        const removeClass = (element, className) => {
          if (!element || !className) throw "Both element and className mandatory";
          if (!classExists(element, className)) return;
          element.classList.remove(className);
        };
        const onScanTypeSelectionChange = event => {
          const setupFileOption = () => {
            currentScanTypeSelection = SCAN_TYPE_FILE;
            html5QrCode.clear();
            setPlaceholder();
            if (stopButton.disabled != true) {
              stopButton.click();
            }
            addClass(scanRegionCamera, "disabled");
            removeClass(scanRegionFile, "disabled");
            qrFileInput.disabled = false;
            setFeedback("Select image file to scan QR code.");
          };
          const setupCameraOption = () => {
            currentScanTypeSelection = SCAN_TYPE_CAMERA;
            html5QrCode.clear();
            setPlaceholder();
            qrFileInput.value = "";
            qrFileInput.disabled = true;
            removeClass(scanRegionCamera, "disabled");
            addClass(scanRegionFile, "disabled");
            setFeedback("Click 'Start Scanning' to <b>start scanning QR Code</b>");
          };
          const val = event.target.value;
          if (val == "file") {
            setupFileOption();
          } else if (val == "camera") {
            setupCameraOption();
          } else {
            throw `Unsupported scan type ${val}`;
          }
        };
        document.querySelectorAll("input[name='scan-type']").forEach(input => {
          input.addEventListener("change", onScanTypeSelectionChange);
        });
        requestPermissionButton.addEventListener("click", function () {
          if (currentScanTypeSelection != SCAN_TYPE_CAMERA) return;
          requestPermissionButton.disabled = true;
          Html5Qrcode.getCameras()
            .then(cameras => {
              selectCameraContainer.innerHTML = `Select Camera (${cameras.length})`;
              if (cameras.length == 0) {
                return setFeedback("Error: Zero cameras found in the device");
              }
              for (var i = 0; i < cameras.length; i++) {
                const camera = cameras[i];
                const value = camera.id;
                const name = camera.label == null ? value : camera.label;
                const option = document.createElement("option");
                option.value = value;
                option.innerHTML = name;
                cameraSelection.appendChild(option);
              }
              cameraSelection.disabled = false;
              scanButton.disabled = false;
              scanButton.addEventListener("click", () => {
                if (currentScanTypeSelection != SCAN_TYPE_CAMERA) return;
                const cameraId = cameraSelection.value;
                cameraSelection.disabled = true;
                scanButton.disabled = true;
                // Start scanning.
                html5QrCode
                  .start(
                    cameraId,
                    {
                      fps: 10,
                      qrbox: 250
                    },
                    qrCodeSuccessCallback,
                    qrCodeErrorCallback
                  )
                  .then(_ => {
                    stopButton.disabled = false;
                    setStatus("scanning");
                    setFeedback("");
                  })
                  .catch(error => {
                    cameraSelection.disabled = false;
                    scanButton.disabled = false;
                    videoErrorCallback(error);
                  });
              });
              stopButton.addEventListener("click", function () {
                stopButton.disabled = true;
                html5QrCode
                  .stop()
                  .then(ignore => {
                    cameraSelection.disabled = false;
                    scanButton.disabled = false;
                    setFeedback("Stopped");
                    setFeedback("Click 'Start Scanning' to <b>start scanning QR Code</b>");
                    scannedCodeContainer.innerHTML = "";
                    setPlaceholder();
                  })
                  .catch(err => {
                    stopButton.disabled = false;
                    setFeedback("Error");
                    setFeedback("Race condition, unable to close the scan.");
                  });
              });
            })
            .catch(err => {
              requestPermissionButton.disabled = false;
              setFeedback(`Error: Unable to query any cameras. Reason: ${err}`);
            });
        });
      });
    </script>
  </body>
</html>
